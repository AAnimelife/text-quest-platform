
/* ./__fuzz__/auth.fuzz.test.js */
const request = require('supertest');
const app = require('../app'); 
const fc = require('fast-check');

describe('Fuzz testing /api/auth/login', () => {
  it(
    'should not crash on random email/password',
    async () => {
      await fc.assert(
        fc.asyncProperty(
          fc.string({ maxLength: 100 }), 
          fc.string({ maxLength: 100 }),
          async (email, password) => {
            const res = await request(app)
              .post('/api/auth/login')
              .send({ email, password });

            // Проверим, что сервер не упал
            expect([200, 400, 401, 500]).toContain(res.statusCode);
          }
        ),
        {
          numRuns: 30, 
          endOnFailure: true,
        }
      );
    },
    15000 // общий таймаут на тест
  );
});

        
/* ./__fuzz__/quest.fuzz.test.js */
// backend/__fuzz__/quest.fuzz.test.js
const request = require('supertest');
const app = require('../app');
const fc = require('fast-check');

describe('Fuzz testing /api/quests', () => {
  it('should handle malformed quest objects', async () => {
    await fc.assert(
      fc.asyncProperty(
        fc.string(),
        fc.string(),
        fc.array(fc.string()),
        fc.object(),
        async (title, description, tags, settings) => {
          const token = 'FAKE_OR_VALID_JWT';
          const res = await request(app)
            .post('/api/quests')
            .set('Authorization', `Bearer ${token}`)
            .send({ title, description, tags, settings });

          expect([201, 400, 401, 500]).toContain(res.statusCode);
        }
      ),
      { numRuns: 50 }
    );
  });
});

const mongoose = require('mongoose');

afterAll(async () => {
  await mongoose.connection.close();
});

        
/* ./app.js */
// backend/app.js
const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const cors = require('cors');

dotenv.config();

const app = express();
app.use(cors());
app.use(express.json());

app.use('/api/auth', require('./routes/authRoutes'));
app.use('/api/quests', require('./routes/questRoutes'));
app.use('/api/pages', require('./routes/pageRoutes'));
app.use('/api/users', require('./routes/userRoutes'));

module.exports = app;

        
/* ./package.json */
{
  "name": "text-quest-platform",
  "version": "1.0.0",
  "description": "",
  "main": "frontend/index.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/AAnimelife/text-quest-platform.git"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "type": "commonjs",
  "bugs": {
    "url": "https://github.com/AAnimelife/text-quest-platform/issues"
  },
  "homepage": "https://github.com/AAnimelife/text-quest-platform#readme",
  "dependencies": {
    "bcryptjs": "^3.0.2",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.10.1"
  },
  "devDependencies": {
    "fast-check": "^4.1.1",
    "jest": "^29.7.0",
    "nodemon": "^3.1.9",
    "supertest": "^7.1.1"
  },
  "jest": {
    "setupFilesAfterEnv": [
      "<rootDir>/test-setup.js"
    ],
    "testEnvironment": "node"
  }
}
        
/* ./server.js */
// backend/server.js
const app = require('./app');
const mongoose = require('mongoose');

mongoose.connect(process.env.MONGO_URI)
  .then(() => {
    const PORT = process.env.PORT || 5005;
    app.listen(PORT, () => console.log(`Server started: localhost:${PORT}`));
  })
  .catch(err => console.log("MongoDB error:", err));

        
/* ./test-setup.js */
// backend/test-setup.js
const mongoose = require('mongoose');
require('dotenv').config();

beforeAll(async () => {
  await mongoose.connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  });
}, 15000);

        
